import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { withAuth } from '@/lib/auth'

const prisma = new PrismaClient()

// GET –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export async function GET() {
  try {
    console.log('üîç Fetching products from admin API...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    const products = await prisma.product.findMany({
      include: {
        category: {
          select: {
            name: true
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    })

    console.log(`‚úÖ Found ${products.length} products`)
    if (products.length > 0) {
      console.log('üì¶ Sample product:', {
        id: products[0].id,
        name: products[0].name,
        category: products[0].category?.name
      })
    }

    return NextResponse.json(products)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// POST –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export async function POST(request: Request) {
  try {
    console.log('üîÑ Creating new product...')
    const body = await request.json()
    console.log('üì¶ Received product data:', body)
    const { name, description, price, stock, category_id, image_url } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        { status: 400 }
      )
    }

    if (!price || price <= 0) {
      return NextResponse.json(
        { error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è' },
        { status: 400 }
      )
    }

    if (stock === undefined || stock < 0) {
      return NextResponse.json(
        { error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º' },
        { status: 400 }
      )
    }

    if (!category_id) {
      return NextResponse.json(
        { error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const categoryExists = await prisma.category.findUnique({
      where: { id: category_id }
    })

    if (!categoryExists) {
      return NextResponse.json(
        { error: '–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const product = await prisma.product.create({
      data: {
        name,
        description: description || null,
        price: parseFloat(price),
        stock: parseInt(stock),
        category_id,
        image_url: image_url || null
      },
      include: {
        category: {
          select: {
            name: true
          }
        }
      }
    })

    console.log('‚úÖ Product created successfully:', product.name)
    return NextResponse.json(product, { status: 201 })

  } catch (error) {
    console.error('‚ùå Error creating product:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}