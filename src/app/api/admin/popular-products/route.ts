import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET() {
  try {
    console.log('üîç Fetching popular products...')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const products = await prisma.product.findMany({
      take: 5,
      include: {
        category: {
          select: {
            name: true
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è sales –∏ revenue –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    const transformedProducts = products.map(product => ({
      id: product.id,
      name: product.name,
      sales: Math.floor(Math.random() * 50) + 1, // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      revenue: product.price * Math.floor(Math.random() * 50 + 1) // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }))

    console.log(`‚úÖ Found ${transformedProducts.length} products for popular section`)

    return NextResponse.json(transformedProducts)

  } catch (error) {
    console.error('‚ùå Error fetching popular products:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}