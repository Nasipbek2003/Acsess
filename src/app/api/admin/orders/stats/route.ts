import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET() {
  try {
    console.log('üîç Fetching order statistics...')
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const [
      newOrders,
      processingOrders,
      completedOrders,
      canceledOrders
    ] = await Promise.all([
      // –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
      prisma.order.count({
        where: { status: 'NEW' }
      }),
      
      // –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
      prisma.order.count({
        where: { status: 'PROCESSING' }
      }),
      
      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
      prisma.order.count({
        where: { status: 'COMPLETED' }
      }),
      
      // –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
      prisma.order.count({
        where: { status: 'CANCELED' }
      })
    ])

    const statsResult = {
      new: newOrders,
      processing: processingOrders, 
      completed: completedOrders,
      canceled: canceledOrders
    }
    
    console.log('‚úÖ Order stats:', statsResult)
    return NextResponse.json(statsResult)

  } catch (error) {
    console.error('‚ùå Error fetching order statistics:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

