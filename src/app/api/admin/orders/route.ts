import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
export async function GET() {
  try {
    console.log('üîç Fetching all orders...')
    
    const orders = await prisma.order.findMany({
      include: {
        user: {
          select: {
            name: true,
            email: true,
            phone: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                name: true,
                price: true
              }
            }
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedOrders = orders.map(order => ({
      id: parseInt(order.id.slice(-4)), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ ID –∫–∞–∫ —á–∏—Å–ª–æ
      customer: order.user.name,
      email: order.user.email,
      phone: order.user.phone || '',
      total: order.total_price,
      status: order.status.toLowerCase(),
      date: order.created_at.toISOString().split('T')[0],
      items: order.items.length
    }))

    console.log(`‚úÖ Found ${formattedOrders.length} orders`)
    return NextResponse.json(formattedOrders)

  } catch (error) {
    console.error('‚ùå Error fetching orders:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { customerName, customerEmail, customerPhone, items, status, total } = body

    console.log('üîç Creating new order:', body)

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { email: customerEmail }
    })

    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await prisma.user.create({
        data: {
          name: customerName,
          email: customerEmail,
          phone: customerPhone,
          password_hash: 'temp_hash', // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ—à
          role: 'CLIENT'
        }
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        user_id: user.id,
        status: status.toUpperCase(),
        total_price: total
      }
    })

    console.log(`‚úÖ Order created with ID: ${order.id}`)
    
    return NextResponse.json({
      id: parseInt(order.id.slice(-4)),
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    }, { status: 201 })

  } catch (error) {
    console.error('‚ùå Error creating order:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

