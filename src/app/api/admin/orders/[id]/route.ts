import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export async function PUT(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: orderId } = await params
    const body = await request.json()
    const { customerName, customerEmail, customerPhone, status, total } = body

    console.log(`üîç Updating order ${orderId}:`, body)

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: {
          endsWith: orderId.padStart(4, '0')
        }
      },
      include: {
        user: true
      }
    })

    if (!existingOrder) {
      return NextResponse.json(
        { error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: existingOrder.user_id },
      data: {
        name: customerName,
        email: customerEmail,
        phone: customerPhone
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    await prisma.order.update({
      where: { id: existingOrder.id },
      data: {
        status: status.toUpperCase(),
        total_price: total
      }
    })

    console.log(`‚úÖ Order ${orderId} updated successfully`)
    
    return NextResponse.json({
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    })

  } catch (error) {
    console.error(`‚ùå Error updating order:`, error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
export async function DELETE(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: orderId } = await params
    
    console.log(`üîç Deleting order ${orderId}`)

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: {
          endsWith: orderId.padStart(4, '0')
        }
      }
    })

    if (!existingOrder) {
      return NextResponse.json(
        { error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    await prisma.orderItem.deleteMany({
      where: { order_id: existingOrder.id }
    })

    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    await prisma.order.delete({
      where: { id: existingOrder.id }
    })

    console.log(`‚úÖ Order ${orderId} deleted successfully`)
    
    return NextResponse.json({
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    })

  } catch (error) {
    console.error(`‚ùå Error deleting order:`, error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}
