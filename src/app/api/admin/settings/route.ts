import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export async function GET() {
  try {
    console.log('üîç Fetching settings...')
    
    const settings = await prisma.setting.findMany()
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const settingsObject = settings.reduce((acc, setting) => {
      if (setting.login_admin && setting.password_admin) {
        // –ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        return acc
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å—Ç—Ä–æ–∫–∏
      if (setting.description?.startsWith('{')) {
        try {
          acc[setting.description] = JSON.parse(setting.description)
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
      }
      
      return acc
    }, {} as any)

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultSettings = {
      phone: '',
      email: '',
      address: '',
      socialLinks: {
        telegram: '',
        whatsapp: '',
        instagram: '',
        vk: ''
      },
      siteTitle: 'Acsess Admin',
      siteDescription: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º',
      keywords: '',
      metaDescription: '',
      logoUrl: '',
      bannerUrl: '',
      welcomeText: '',
      aboutText: '',
      emailNotifications: true,
      telegramNotifications: false,
      telegramBotToken: '',
      telegramChatId: '',
      notificationEmail: ''
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
    const result = { ...defaultSettings, ...settingsObject }
    
    console.log('‚úÖ Settings loaded')
    return NextResponse.json(result)

  } catch (error) {
    console.error('‚ùå Error fetching settings:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// POST - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export async function POST(request: Request) {
  try {
    const body = await request.json()
    console.log('üîç Saving settings:', body)

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö)
    await prisma.setting.deleteMany({
      where: {
        AND: [
          { login_admin: null },
          { password_admin: null }
        ]
      }
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsToSave = []
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (body.phone) {
      settingsToSave.push({
        description: 'phone',
        telegram_key: body.phone
      })
    }
    
    if (body.email) {
      settingsToSave.push({
        description: 'email',
        telegram_key: body.email
      })
    }
    
    if (body.address) {
      settingsToSave.push({
        description: 'address',
        telegram_key: body.address
      })
    }

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    if (body.socialLinks) {
      settingsToSave.push({
        description: 'socialLinks',
        telegram_key: JSON.stringify(body.socialLinks)
      })
    }

    // SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (body.siteTitle) {
      settingsToSave.push({
        description: 'siteTitle',
        telegram_key: body.siteTitle
      })
    }
    
    if (body.siteDescription) {
      settingsToSave.push({
        description: 'siteDescription',
        telegram_key: body.siteDescription
      })
    }
    
    if (body.keywords) {
      settingsToSave.push({
        description: 'keywords',
        telegram_key: body.keywords
      })
    }
    
    if (body.metaDescription) {
      settingsToSave.push({
        description: 'metaDescription',
        telegram_key: body.metaDescription
      })
    }

    // –ë—Ä–µ–Ω–¥–∏–Ω–≥
    if (body.logoUrl) {
      settingsToSave.push({
        description: 'logoUrl',
        telegram_key: body.logoUrl
      })
    }
    
    if (body.bannerUrl) {
      settingsToSave.push({
        description: 'bannerUrl',
        telegram_key: body.bannerUrl
      })
    }
    
    if (body.welcomeText) {
      settingsToSave.push({
        description: 'welcomeText',
        telegram_key: body.welcomeText
      })
    }
    
    if (body.aboutText) {
      settingsToSave.push({
        description: 'aboutText',
        telegram_key: body.aboutText
      })
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    settingsToSave.push({
      description: 'emailNotifications',
      telegram_key: body.emailNotifications ? 'true' : 'false'
    })
    
    settingsToSave.push({
      description: 'telegramNotifications',
      telegram_key: body.telegramNotifications ? 'true' : 'false'
    })
    
    if (body.telegramBotToken) {
      settingsToSave.push({
        description: 'telegramBotToken',
        telegram_key: body.telegramBotToken
      })
    }
    
    if (body.telegramChatId) {
      settingsToSave.push({
        description: 'telegramChatId',
        telegram_key: body.telegramChatId
      })
    }
    
    if (body.notificationEmail) {
      settingsToSave.push({
        description: 'notificationEmail',
        telegram_key: body.notificationEmail
      })
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    for (const setting of settingsToSave) {
      await prisma.setting.create({
        data: setting
      })
    }

    console.log('‚úÖ Settings saved successfully')
    return NextResponse.json({ message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' })

  } catch (error) {
    console.error('‚ùå Error saving settings:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

