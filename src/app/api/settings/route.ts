import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞
export async function GET() {
  try {
    console.log('üîç Fetching public site settings...')
    
    const settings = await prisma.setting.findMany({
      where: {
        is_secure: false // –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      }
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const publicSettings = settings.reduce((acc: any, setting) => {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
      const key = setting.description?.toLowerCase().replace(/\s+/g, '_') || `setting_${setting.id}`
      
      acc[key] = {
        id: setting.id,
        description: setting.description,
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        value: setting.description || null
      }
      
      return acc
    }, {})

    console.log(`‚úÖ Found ${settings.length} public settings`)
    return NextResponse.json(publicSettings)

  } catch (error) {
    console.error('‚ùå Error fetching settings:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}