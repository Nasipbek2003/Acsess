import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
function generateCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π
async function cleanupExpiredSessions() {
  try {
    await prisma.twoFactorSession.deleteMany({
      where: {
        expires_at: {
          lt: new Date()
        }
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(phone: string, code: string): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settings = await prisma.setting.findFirst({
      where: {
        telegram_key: {
          not: null
        }
      }
    })

    if (!settings?.telegram_key) {
      console.error('Telegram bot token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
      return false
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ chat_id –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ —Å–≤—è–∑–∫–∞ phone -> chat_id
    const message = `üîê –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ${code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
    
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è ${phone}: ${message}`)
    
    if (!settings.telegram_key || settings.telegram_key === 'YOUR_BOT_TOKEN_HERE' || settings.telegram_key === 'DEMO_BOT_TOKEN' || settings.telegram_key === 'YOUR_REAL_TOKEN_HERE') {
      console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ —Ä–µ–∂–∏–º - –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏:', code)
      console.log('üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      return true
    }

    // –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    const chatId = (settings as any).chat_id
    if (!chatId) {
      console.log('‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
      console.log('‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', code)
      return false
    }
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...')
      const botInfoResponse = await fetch(`https://api.telegram.org/bot${settings.telegram_key}/getMe`)
      const botInfo = await botInfoResponse.json()
      
      if (!botInfo.ok) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:', botInfo)
        console.log('‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', code)
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Prisma Studio –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞')
        return false
      }
      
      console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π! –ë–æ—Ç: @${botInfo.result.username}`)
      
      const response = await fetch(`https://api.telegram.org/bot${settings.telegram_key}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML'
        }),
      })

      if (response.ok) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
        return true
      } else {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorData)
        
        if (errorData.error_code === 400 && errorData.description.includes('chat not found')) {
          console.log('üí° Chat ID –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–µ—Ä–µ–∑ /start –±–æ—Ç—É')
        }
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', code)
        return false
      }
    } catch (apiError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram:', apiError)
      console.log('‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', code)
      return false
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return false
  }
}

export async function POST(request: Request) {
  try {
    const { login, password, phoneNumber } = await request.json()

    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { login, passwordLength: password?.length, phoneNumber })

    if (!login || !password) {
      return NextResponse.json(
        { error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      )
    }

    if (!phoneNumber) {
      return NextResponse.json(
        { error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å)
    const settings = await prisma.setting.findFirst({
      where: {
        login_admin: {
          not: null
        },
        password_admin: {
          not: null
        }
      }
    })

    console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã:', settings ? {
      id: settings.id,
      login: settings.login_admin,
      hasPassword: !!settings.password_admin,
      hasTelegram: !!settings.telegram_key
    } : '–ù–ï –ù–ê–ô–î–ï–ù–´')

    if (!settings) {
      return NextResponse.json(
        { error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 500 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    if (settings.login_admin !== login || settings.password_admin !== password) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { 
        inputLogin: login, 
        dbLogin: settings.login_admin,
        passwordMatch: settings.password_admin === password
      })
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      )
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤–µ—Ä–Ω—ã!')

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    await cleanupExpiredSessions()

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    const code = generateCode()
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const session = await prisma.twoFactorSession.create({
      data: {
        phone: phoneNumber,
        code,
        expires_at: expiresAt
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
    const sent = await sendTelegramMessage(phoneNumber, code)

    if (!sent) {
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ Telegram' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      sessionId: session.id,
      phoneNumber,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (deprecated - –∏—Å–ø–æ–ª—å–∑—É–µ–º cleanupExpiredSessions)
export function cleanupExpiredCodes() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  console.log('‚ö†Ô∏è  cleanupExpiredCodes —É—Å—Ç–∞—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cleanupExpiredSessions')
}
