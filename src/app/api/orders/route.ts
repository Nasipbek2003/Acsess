import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
export async function POST(request: Request) {
  try {
    console.log('üõí Creating new order from client...')
    const body = await request.json()
    console.log('üì¶ Received order data:', body)
    
    const { 
      customerName, 
      customerEmail, 
      customerPhone, 
      customerAddress, 
      items, 
      totalPrice 
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!customerName || !customerPhone || !items || items.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –æ—Å—Ç–∞—Ç–∫–∏
    for (const item of items) {
      const product = await prisma.product.findUnique({
        where: { id: item.id }
      })

      if (!product) {
        return NextResponse.json(
          { error: `–¢–æ–≤–∞—Ä —Å ID ${item.id} –Ω–µ –Ω–∞–π–¥–µ–Ω` },
          { status: 400 }
        )
      }

      if (product.stock < item.quantity) {
        return NextResponse.json(
          { error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${product.stock}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${item.quantity}` },
          { status: 400 }
        )
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    let user = await prisma.user.findUnique({
      where: { email: customerEmail || `${customerPhone}@temp.com` }
    })

    if (!user) {
      user = await prisma.user.create({
        data: {
          name: customerName,
          email: customerEmail || `${customerPhone}@temp.com`,
          phone: customerPhone,
          password_hash: 'temp', // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö—ç—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          role: 'CLIENT'
        }
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        user_id: user.id,
        status: 'NEW',
        total_price: totalPrice,
        items: {
          create: items.map((item: any) => ({
            product_id: item.id,
            quantity: item.quantity,
            price: item.price
          }))
        }
      },
      include: {
        items: {
          include: {
            product: true
          }
        },
        user: true
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for (const item of items) {
      await prisma.product.update({
        where: { id: item.id },
        data: {
          stock: {
            decrement: item.quantity
          }
        }
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å
    if (customerAddress) {
      await prisma.delivery.create({
        data: {
          order_id: order.id,
          address: customerAddress,
          status: 'PENDING'
        }
      })
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    await prisma.notification.create({
      data: {
        title: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
        message: `–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id} –æ—Ç ${customerName} –Ω–∞ —Å—É–º–º—É ${totalPrice}‚ÇΩ`,
        type: 'info'
      }
    })

    console.log('‚úÖ Order created successfully:', order.id)
    return NextResponse.json({ 
      orderId: order.id, 
      status: 'success',
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' 
    }, { status: 201 })

  } catch (error) {
    console.error('‚ùå Error creating order:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}
